import os
import json
import openmeteo_requests
from gigachat import GigaChat
import requests_cache
from retry_requests import retry
from geopy.geocoders import Nominatim
import customtkinter as ctk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
import requests

# –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –∞–ø–∏ –∫–ª—é—á
CACHE_DIR = os.path.expanduser('~/.cache')
CACHE_PATH = os.path.join(CACHE_DIR, 'weather_cache')
SETTINGS_PATH = os.path.join(CACHE_DIR, 'settings.json')
GIGA_CREDENTIALS = " –∫–ª—é—á GIGA"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è  –ø–æ–≥–æ–¥—ã –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
os.makedirs(CACHE_DIR, exist_ok=True)

# –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenMeteo
cache_session = requests_cache.CachedSession(CACHE_PATH, expire_after=3600)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ctk.set_appearance_mode("system")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
ctk.set_default_color_theme("blue")  #  —Ç–µ–º–∞

class WeatherApp:
    def __init__(self, root):
        self.root = root
        self.root.geometry("1300x700")
        self.root.title("AI Weather")
        self.current_city = ""
        self.forecast_days = 7  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π
        self.theme = "system"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.hourly_data = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è  –¥–∞–Ω–Ω—ã—Ö
        self.load_settings()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.setup_ui()

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        if os.path.exists(SETTINGS_PATH):
            with open(SETTINGS_PATH, "r") as f:
                settings = json.load(f)
                self.forecast_days = settings.get("forecast_days", 7)
                self.theme = settings.get("theme", "system")
                ctk.set_appearance_mode(self.theme)

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª."""
        settings = {
            "forecast_days": self.forecast_days,
            "theme": self.theme
        }
        with open(SETTINGS_PATH, "w") as f:
            json.dump(settings, f)

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.root.grid_rowconfigure(1, weight=1)
        self.root.grid_columnconfigure(1, weight=1)

        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.sidebar = ctk.CTkFrame(self.root, width=200, corner_radius=0)
        self.sidebar.grid(row=0, column=0, rowspan=2, sticky="nswe")
        self.sidebar.grid_rowconfigure(6, weight=1)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ì–æ—Ä–æ–¥"
        self.button_city = ctk.CTkButton(
            self.sidebar,
            text="–ì–æ—Ä–æ–¥",
            command=lambda: self.show_tab("–ì–æ—Ä–æ–¥"),
            font=("Arial", 16, "bold"),
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=10,
            width=180,
            height=40
        )
        self.button_city.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤–∫–ª–∞–¥–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–≥–æ–¥–æ–π
        self.weather_tabs_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        self.weather_tabs_frame.grid(row=1, column=0, padx=10, pady=10, sticky="ew")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ –ø–æ–≥–æ–¥—ã
        self.button_weather_group = ctk.CTkButton(
            self.weather_tabs_frame,
            text="–ü–æ–≥–æ–¥–∞ ‚ñº",
            command=self.toggle_weather_tabs,
            font=("Arial", 16, "bold"),
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=10,
            width=180,
            height=40
        )
        self.button_weather_group.pack(fill="x", pady=(0, 5))

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –ø–æ–≥–æ–¥—ã 
        self.button_weather = ctk.CTkButton(
            self.weather_tabs_frame,
            text="–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞",
            command=lambda: self.show_tab("–ü–æ–≥–æ–¥–∞"),
            font=("Arial", 14, "bold"),
            state="disabled",
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=10,
            width=180,
            height=40
        )
        self.button_forecast = ctk.CTkButton(
            self.weather_tabs_frame,
            text=f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {self.forecast_days} –¥–Ω–µ–π",
            command=lambda: self.show_tab("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π"),
            font=("Arial", 14, "bold"),
            state="disabled",
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=10,
            width=180,
            height=40
        )
        self.button_hourly = ctk.CTkButton(
            self.weather_tabs_frame,
            text="–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑",
            command=lambda: self.show_tab("–ü–æ—á–∞—Å–æ–≤—ã–µ –ü–æ–≥–æ–¥–Ω—ã–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"),
            font=("Arial", 14, "bold"),
            state="disabled",
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=10,
            width=180,
            height=40
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.button_settings = ctk.CTkButton(
            self.sidebar,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=lambda: self.show_tab("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            font=("Arial", 16, "bold"),
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=10,
            width=180,
            height=40
        )
        self.button_settings.grid(row=2, column=0, padx=10, pady=10, sticky="ew")

        # –í–∫–ª–∞–¥–∫–∞ "–ì–æ—Ä–æ–¥"
        self.frame_city = ctk.CTkFrame(self.root)
        self.frame_city.grid(row=1, column=1, sticky="nsew")
        self.frame_city.grid_rowconfigure(0, weight=1)
        self.frame_city.grid_columnconfigure(0, weight=1)

        self.scrollable_frame_city = ctk.CTkScrollableFrame(self.frame_city)
        self.scrollable_frame_city.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.scrollable_frame_city.grid_rowconfigure(0, weight=1)
        self.scrollable_frame_city.grid_columnconfigure(0, weight=1)

        self.label_title_city = ctk.CTkLabel(self.scrollable_frame_city, text="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥", font=("Arial", 24, "bold"))
        self.label_title_city.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
        self.city_name_entry = ctk.CTkEntry(self.scrollable_frame_city, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", font=("Arial", 16))
        self.city_name_entry.grid(row=1, column=0, padx=10, pady=10, sticky="ew")

        # –ö–Ω–æ–ø–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥" (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
        self.button_set_city = ctk.CTkButton(
            self.scrollable_frame_city,
            text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥",
            command=self.set_city,
            font=("Arial", 16, "bold"),
            fg_color="#4CAF50",
            hover_color="#45a049",
            corner_radius=10,
            width=200,
            height=40,
            state="disabled"  # –ö–Ω–æ–ø–∫–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        )
        self.button_set_city.grid(row=2, column=0, padx=10, pady=10, sticky="ew")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
        self.label_city_message = ctk.CTkLabel(
            self.scrollable_frame_city,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥—Ä—É–≥–∏–º –≤–∫–ª–∞–¥–∫–∞–º.",
            font=("Arial", 14),
            text_color="gray"
        )
        self.label_city_message.grid(row=3, column=0, padx=10, pady=10, sticky="w")

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
        self.city_name_entry.bind("<KeyRelease>", self.check_city_input)

        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ–≥–æ–¥–∞"
        self.frame_weather = ctk.CTkFrame(self.root)
        self.frame_weather.grid(row=1, column=1, sticky="nsew")
        self.frame_weather.grid_rowconfigure(0, weight=1)
        self.frame_weather.grid_columnconfigure(0, weight=1)

        self.scrollable_frame_weather = ctk.CTkScrollableFrame(self.frame_weather)
        self.scrollable_frame_weather.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.scrollable_frame_weather.grid_rowconfigure(0, weight=1)
        self.scrollable_frame_weather.grid_columnconfigure(0, weight=1)

        self.label_title_weather = ctk.CTkLabel(self.scrollable_frame_weather, text="–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", font=("Arial", 24, "bold"))
        self.label_title_weather.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        # –§—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
        self.frame_current_weather = ctk.CTkFrame(self.scrollable_frame_weather, corner_radius=10)
        self.frame_current_weather.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

        self.label_temperature = ctk.CTkLabel(self.frame_current_weather, text="üå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: --¬∞C", font=("Arial", 16, "bold"))
        self.label_temperature.pack(padx=10, pady=5, anchor="w")

        self.label_feels_like = ctk.CTkLabel(self.frame_current_weather, text="üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º: --¬∞C", font=("Arial", 16, "bold"))
        self.label_feels_like.pack(padx=10, pady=5, anchor="w")

        self.label_humidity = ctk.CTkLabel(self.frame_current_weather, text="üíß –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: --%", font=("Arial", 16, "bold"))
        self.label_humidity.pack(padx=10, pady=5, anchor="w")

        self.label_precipitation = ctk.CTkLabel(self.frame_current_weather, text="üåßÔ∏è –¢–µ–∫—É—â–∏–µ –æ—Å–∞–¥–∫–∏: -- –º–º", font=("Arial", 16, "bold"))
        self.label_precipitation.pack(padx=10, pady=5, anchor="w")

        self.label_wind = ctk.CTkLabel(self.frame_current_weather, text="üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: -- –º/—Å", font=("Arial", 16, "bold"))
        self.label_wind.pack(padx=10, pady=5, anchor="w")

        self.label_wind_direction = ctk.CTkLabel(self.frame_current_weather, text="üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: --", font=("Arial", 16, "bold"))
        self.label_wind_direction.pack(padx=10, pady=5, anchor="w")

        self.label_cloudcover = ctk.CTkLabel(self.frame_current_weather, text="‚òÅÔ∏è –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏: --%", font=("Arial", 16, "bold"))
        self.label_cloudcover.pack(padx=10, pady=5, anchor="w")

        self.label_weathercode = ctk.CTkLabel(self.frame_current_weather, text="üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–π –∫–æ–¥: --", font=("Arial", 16, "bold"))
        self.label_weathercode.pack(padx=10, pady=5, anchor="w")

        # –û—Ü–µ–Ω–∫–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø–æ–≥–æ–¥—ã
        self.label_comfort = ctk.CTkLabel(self.frame_current_weather, text="üåü –û—Ü–µ–Ω–∫–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞: --/10", font=("Arial", 16, "bold"))
        self.label_comfort.pack(padx=10, pady=5, anchor="w")

        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI
        self.frame_recommendation = ctk.CTkFrame(self.scrollable_frame_weather, corner_radius=10)
        self.frame_recommendation.grid(row=2, column=0, padx=10, pady=10, sticky="nsew")

        self.label_recommendation = ctk.CTkLabel(self.frame_recommendation, text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –ù–µ–π—Ä–æ—Å–µ—Ç–∏: --", font=("Arial", 16, "bold"), wraplength=700)
        self.label_recommendation.pack(padx=10, pady=10, anchor="w")

        # –í–∫–ª–∞–¥–∫–∞ "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π"
        self.frame_forecast_tab = ctk.CTkFrame(self.root)
        self.frame_forecast_tab.grid(row=1, column=1, sticky="nsew")
        self.frame_forecast_tab.grid_rowconfigure(1, weight=1)
        self.frame_forecast_tab.grid_columnconfigure(0, weight=1)

        self.label_title_7_days = ctk.CTkLabel(self.frame_forecast_tab, text=f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {self.forecast_days} –¥–Ω–µ–π", font=("Arial", 24, "bold"))
        self.label_title_7_days.grid(row=0, column=0, padx=10, pady=5, sticky="w")

        self.frame_forecast_and_chart = ctk.CTkFrame(self.frame_forecast_tab)
        self.frame_forecast_and_chart.grid(row=1, column=0, padx=10, pady=5, sticky="nsew")
        self.frame_forecast_and_chart.grid_rowconfigure(0, weight=1)
        self.frame_forecast_and_chart.grid_columnconfigure(0, weight=1)
        self.frame_forecast_and_chart.grid_columnconfigure(1, weight=1)

        self.frame_forecast = ctk.CTkScrollableFrame(self.frame_forecast_and_chart, height=200)
        self.frame_forecast.grid(row=0, column=0, padx=10, pady=5, sticky="nsew")

        self.frame_chart = ctk.CTkScrollableFrame(self.frame_forecast_and_chart)
        self.frame_chart.grid(row=0, column=1, padx=10, pady=5, sticky="nsew")

        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑"
        self.frame_hourly_tab = ctk.CTkFrame(self.root)
        self.frame_hourly_tab.grid(row=1, column=1, sticky="nsew")
        self.frame_hourly_tab.grid_rowconfigure(1, weight=1)
        self.frame_hourly_tab.grid_columnconfigure(0, weight=1)

        self.label_title_hourly = ctk.CTkLabel(self.frame_hourly_tab, text="–ü–æ—á–∞—Å–æ–≤–æ–π –ü—Ä–æ–≥–Ω–æ–∑", font=("Arial", 24, "bold"))
        self.label_title_hourly.grid(row=0, column=0, padx=10, pady=5, sticky="w")

        self.frame_hourly_and_chart = ctk.CTkFrame(self.frame_hourly_tab)
        self.frame_hourly_and_chart.grid(row=1, column=0, padx=10, pady=5, sticky="nsew")
        self.frame_hourly_and_chart.grid_rowconfigure(0, weight=1)
        self.frame_hourly_and_chart.grid_columnconfigure(0, weight=1)
        self.frame_hourly_and_chart.grid_columnconfigure(1, weight=1)

        self.frame_hourly = ctk.CTkScrollableFrame(self.frame_hourly_and_chart, height=200)
        self.frame_hourly.grid(row=0, column=0, padx=10, pady=5, sticky="nsew")

        self.frame_hourly_chart = ctk.CTkScrollableFrame(self.frame_hourly_and_chart)
        self.frame_hourly_chart.grid(row=0, column=1, padx=10, pady=5, sticky="nsew")

        # –í–∫–ª–∞–¥–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.frame_settings = ctk.CTkFrame(self.root)
        self.frame_settings.grid(row=1, column=1, sticky="nsew")
        self.frame_settings.grid_rowconfigure(0, weight=1)
        self.frame_settings.grid_columnconfigure(0, weight=1)

        self.scrollable_frame_settings = ctk.CTkScrollableFrame(self.frame_settings)
        self.scrollable_frame_settings.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.scrollable_frame_settings.grid_rowconfigure(0, weight=1)
        self.scrollable_frame_settings.grid_columnconfigure(0, weight=1)

        self.label_title_settings = ctk.CTkLabel(self.scrollable_frame_settings, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", font=("Arial", 24, "bold"))
        self.label_title_settings.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        self.label_theme = ctk.CTkLabel(self.scrollable_frame_settings, text="–¢–µ–º–∞:", font=("Arial", 16, "bold"))
        self.label_theme.grid(row=1, column=0, padx=10, pady=10, sticky="w")

        self.theme_var = ctk.StringVar(value=self.theme)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.optionmenu_theme = ctk.CTkOptionMenu(
            self.scrollable_frame_settings,
            values=["system", "light", "dark"],
            command=self.change_theme,
            variable=self.theme_var,
            font=("Arial", 16, "bold"),
            fg_color="#4CAF50",
            button_color="#4CAF50",
            button_hover_color="#45a049",
            text_color="white"
        )
        self.optionmenu_theme.grid(row=1, column=1, padx=10, pady=10, sticky="ew")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        self.label_forecast_days = ctk.CTkLabel(self.scrollable_frame_settings, text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞:", font=("Arial", 16, "bold"))
        self.label_forecast_days.grid(row=2, column=0, padx=10, pady=10, sticky="w")

        self.forecast_days_var = ctk.StringVar(value=str(self.forecast_days))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
        self.optionmenu_forecast_days = ctk.CTkOptionMenu(
            self.scrollable_frame_settings,
            values=["7", "10", "16"],
            command=self.change_forecast_days,
            variable=self.forecast_days_var,
            font=("Arial", 16, "bold"),
            fg_color="#4CAF50",
            button_color="#4CAF50",
            button_hover_color="#45a049",
            text_color="white"
        )
        self.optionmenu_forecast_days.grid(row=2, column=1, padx=10, pady=10, sticky="ew")

        # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        self.label_no_city = ctk.CTkLabel(self.frame_forecast_tab, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", font=("Arial", 14), text_color="gray")
        self.label_no_city_hourly = ctk.CTkLabel(self.frame_hourly_tab, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", font=("Arial", 14), text_color="gray")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É "–ì–æ—Ä–æ–¥" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_tab("–ì–æ—Ä–æ–¥")

    def toggle_weather_tabs(self):
        """–†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–≥–æ–¥–æ–π."""
        if self.button_weather.winfo_ismapped():
            self.button_weather.pack_forget()
            self.button_forecast.pack_forget()
            self.button_hourly.pack_forget()
            self.button_weather_group.configure(text="–ü–æ–≥–æ–¥–∞ ‚ñ∂")
        else:
            self.button_weather.pack(fill="x", pady=(0, 5))
            self.button_forecast.pack(fill="x", pady=(0, 5))
            self.button_hourly.pack(fill="x", pady=(0, 5))
            self.button_weather_group.configure(text="–ü–æ–≥–æ–¥–∞ ‚ñº")

    def change_theme(self, choice):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.theme = choice
        ctk.set_appearance_mode(choice)
        self.save_settings()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    def change_forecast_days(self, choice):
        """–ò–∑–º–µ–Ω—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        self.forecast_days = int(choice)
        self.button_forecast.configure(text=f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {self.forecast_days} –¥–Ω–µ–π")
        self.label_title_7_days.configure(text=f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {self.forecast_days} –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ {self.current_city}")
        self.save_settings()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.update_7_day_weather()

    def check_city_input(self, event=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞, –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É."""
        if self.city_name_entry.get().strip():
            self.button_set_city.configure(state="normal")  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        else:
            self.button_set_city.configure(state="disabled")  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É

    def set_city(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏."""
        city_name = self.city_name_entry.get()
        if city_name:
            self.current_city = city_name
            self.update_weather_data()
            self.button_weather.configure(state="normal")
            self.button_forecast.configure(state="normal")
            self.button_hourly.configure(state="normal")
            self.label_city_message.grid_remove()
            self.show_tab("–ü–æ–≥–æ–¥–∞")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∫–ª–∞–¥–æ–∫ —Å –≥–æ—Ä–æ–¥–æ–º
            self.label_title_weather.configure(text=f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {self.current_city}")
            self.label_title_7_days.configure(text=f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {self.forecast_days} –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ {self.current_city}")
            self.label_title_hourly.configure(text=f"–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≥–æ—Ä–æ–¥–µ {self.current_city}")

    def update_weather_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–µ."""
        if self.current_city:
            self.get_weather_and_chat()
            self.update_7_day_weather()
            self.update_hourly_weather()

    def get_coordinates_from_city(self, city_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        geolocator = Nominatim(user_agent="weather_app")
        location = geolocator.geocode(city_name)
        if location:
            return location.latitude, location.longitude
        else:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ {city_name}")

    def get_wind_direction(self, degrees):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞."""
        directions = [
            "–°–µ–≤–µ—Ä", "–°–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫", "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫", "–í–æ—Å—Ç–æ–∫–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫",
            "–í–æ—Å—Ç–æ–∫", "–í–æ—Å—Ç–æ–∫–æ-—é–≥–æ-–≤–æ—Å—Ç–æ–∫", "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫", "–Æ–≥–æ-—é–≥–æ-–≤–æ—Å—Ç–æ–∫",
            "–Æ–≥", "–Æ–≥–æ-—é–≥–æ-–∑–∞–ø–∞–¥", "–Æ–≥–æ-–∑–∞–ø–∞–¥", "–ó–∞–ø–∞–¥–æ-—é–≥–æ-–∑–∞–ø–∞–¥",
            "–ó–∞–ø–∞–¥", "–ó–∞–ø–∞–¥–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥", "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥", "–°–µ–≤–µ—Ä–æ-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥"
        ]
        index = round(degrees / 22.5) % 16
        return directions[index]

    def get_weather_and_chat(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ù–µ–π—Ä–æ—Å–µ—Ç–∏."""
        try:
            latitude, longitude = self.get_coordinates_from_city(self.current_city)
            print(f"–ì–æ—Ä–æ–¥: {self.current_city}, –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
            url = "https://api.open-meteo.com/v1/forecast"
            params = {
                "latitude": latitude,
                "longitude": longitude,
                "current": ["temperature_2m", "relative_humidity_2m", "apparent_temperature", "precipitation", "windspeed_10m", "winddirection_10m", "cloudcover", "weathercode"],
                "hourly": ["temperature_2m", "relative_humidity_2m", "precipitation", "cloudcover", "windspeed_10m", "visibility", "weathercode", "soil_temperature_0cm", "soil_temperature_6cm", "soil_temperature_18cm", "soil_temperature_54cm"],
                "daily": ["weathercode", "temperature_2m_max", "temperature_2m_min", "apparent_temperature_max", "apparent_temperature_min", "precipitation_sum", "precipitation_probability_max", "windspeed_10m_max", "winddirection_10m_dominant", "sunrise", "sunset", "uv_index_max"],
                "forecast_days": self.forecast_days
            }
            responses = openmeteo.weather_api(url, params=params)

            response = responses[0]
            current = response.Current()
            current_temperature_2m = current.Variables(0).Value()
            current_relative_humidity_2m = current.Variables(1).Value()
            current_apparent_temperature = current.Variables(2).Value()
            current_precipitation = current.Variables(3).Value()
            current_windspeed = current.Variables(4).Value()
            current_winddirection = current.Variables(5).Value()
            current_cloudcover = current.Variables(6).Value()
            current_weathercode = current.Variables(7).Value()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            wind_direction = self.get_wind_direction(current_winddirection)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.label_temperature.configure(text=f"üå°Ô∏è –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(current_temperature_2m)}¬∞C")
            self.label_feels_like.configure(text=f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º: {int(current_apparent_temperature)}¬∞C")
            self.label_humidity.configure(text=f"üíß –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {int(current_relative_humidity_2m)}%")
            self.label_precipitation.configure(text=f"üåßÔ∏è –¢–µ–∫—É—â–∏–µ –æ—Å–∞–¥–∫–∏: {int(current_precipitation)} –º–º")
            self.label_wind.configure(text=f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {int(current_windspeed)} –º/—Å")
            self.label_wind_direction.configure(text=f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_direction}")
            self.label_cloudcover.configure(text=f"‚òÅÔ∏è –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏: {int(current_cloudcover)}%")
            self.label_weathercode.configure(text=f"üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–π –∫–æ–¥: {self.get_weathercode_description(current_weathercode)}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø–æ–≥–æ–¥—ã
            with GigaChat(credentials=GIGA_CREDENTIALS, verify_ssl_certs=False) as giga:
                weather_info = f"–¢–µ–∫—É—â–∏–µ –æ—Å–∞–¥–∫–∏: {int(current_precipitation)} –º–º, –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(current_temperature_2m)}¬∞C, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º: {int(current_apparent_temperature)}¬∞C, –¢–µ–∫—É—â–∞—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {int(current_relative_humidity_2m)}%, –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {int(current_windspeed)} –º/—Å, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_direction}, –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏: {int(current_cloudcover)}%"
                response = giga.chat(f"–û—Ü–µ–Ω–∏ –∫–æ–º—Ñ–æ—Ä—Ç –ø–æ–≥–æ–¥—ã –æ—Ç 1 –¥–æ 10, –≥–¥–µ 1 - —É–∂–∞—Å–Ω–æ, 10 - –æ—Ç–ª–∏—á–Ω–æ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–≥–æ–¥–∞: {weather_info}")
                comfort_score = response.choices[0].message.content
                self.label_comfort.configure(text=f"üåü –û—Ü–µ–Ω–∫–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –æ—Ç –ù–µ–π—Ä–æ—Å–µ—Ç–∏: {comfort_score}/10")

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç AI
                response = giga.chat(f"–ö–∞–∫ –æ–¥–µ—Ç—å—Å—è –ø–æ –ø–æ–≥–æ–¥–µ: {weather_info}")
                giga_response = response.choices[0].message.content
                print(giga_response)
                self.label_recommendation.configure(text=f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –ù–µ–π—Ä–æ—Å–µ—Ç–∏: {giga_response}")

        except ValueError as e:
            print(e)

    def get_7_day_weather_data(self, city_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ 7 –¥–Ω–µ–π."""
        try:
            latitude, longitude = self.get_coordinates_from_city(city_name)
            url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&daily=weathercode,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum,precipitation_probability_max,windspeed_10m_max,winddirection_10m_dominant,sunrise,sunset,uv_index_max&timezone=auto&forecast_days={self.forecast_days}"
            response = requests.get(url)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code}")
                return None
        except ValueError as e:
            print(e)
            return None

    def get_hourly_weather_data(self, city_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."""
        try:
            latitude, longitude = self.get_coordinates_from_city(city_name)
            url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&hourly=temperature_2m,relative_humidity_2m,precipitation,cloudcover,windspeed_10m,visibility,weathercode,soil_temperature_0cm,soil_temperature_6cm,soil_temperature_18cm,soil_temperature_54cm&timezone=auto&forecast_days=7"
            response = requests.get(url)
            if response.status_code == 200:
                self.hourly_data = response.json()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                return self.hourly_data
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code}")
                return None
        except ValueError as e:
            print(e)
            return None

    def show_weather_forecast(self, data, frame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."""
        for widget in frame.winfo_children():
            widget.destroy()

        daily = data.get('daily', {})
        times = daily.get('time', [])
        temp_max = daily.get('temperature_2m_max', [])
        temp_min = daily.get('temperature_2m_min', [])
        apparent_temp_max = daily.get('apparent_temperature_max', [])
        apparent_temp_min = daily.get('apparent_temperature_min', [])
        precipitation = daily.get('precipitation_sum', [])
        precipitation_probability = daily.get('precipitation_probability_max', [])
        windspeed = daily.get('windspeed_10m_max', [])
        winddirection = daily.get('winddirection_10m_dominant', [])
        sunrise = daily.get('sunrise', [])
        sunset = daily.get('sunset', [])
        uv_index = daily.get('uv_index_max', [])
        weathercode = daily.get('weathercode', [])

        for i in range(len(times)):
            day_frame = ctk.CTkFrame(frame, corner_radius=10)
            day_frame.pack(fill="x", padx=5, pady=5)

            label_day = ctk.CTkLabel(day_frame, text=times[i], font=("Arial", 16, "bold"))
            label_day.grid(row=0, column=0, padx=10, pady=5, sticky="w")

            label_temp = ctk.CTkLabel(day_frame, text=f"üå°Ô∏è –ú–∞–∫—Å.: {temp_max[i]}¬∞C, –ú–∏–Ω.: {temp_min[i]}¬∞C", font=("Arial", 14))
            label_temp.grid(row=1, column=0, padx=10, pady=2, sticky="w")

            label_apparent_temp = ctk.CTkLabel(day_frame, text=f"üå°Ô∏è –ú–∞–∫—Å. –ø–æ –æ—â—É—â–µ–Ω–∏—è–º: {apparent_temp_max[i]}¬∞C, –ú–∏–Ω. –ø–æ –æ—â—É—â–µ–Ω–∏—è–º: {apparent_temp_min[i]}¬∞C", font=("Arial", 14))
            label_apparent_temp.grid(row=2, column=0, padx=10, pady=2, sticky="w")

            label_precip = ctk.CTkLabel(day_frame, text=f"üåßÔ∏è –û—Å–∞–¥–∫–∏: {precipitation[i]} –º–º", font=("Arial", 14))
            label_precip.grid(row=3, column=0, padx=10, pady=2, sticky="w")

            label_precip_prob = ctk.CTkLabel(day_frame, text=f"üåßÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {precipitation_probability[i]}%", font=("Arial", 14))
            label_precip_prob.grid(row=4, column=0, padx=10, pady=2, sticky="w")

            label_wind = ctk.CTkLabel(day_frame, text=f"üí® –í–µ—Ç–µ—Ä: {windspeed[i]} –º/—Å", font=("Arial", 14))
            label_wind.grid(row=5, column=0, padx=10, pady=2, sticky="w")

            label_wind_direction = ctk.CTkLabel(day_frame, text=f"üß≠ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {self.get_wind_direction(winddirection[i])}", font=("Arial", 14))
            label_wind_direction.grid(row=6, column=0, padx=10, pady=2, sticky="w")

            label_sunrise = ctk.CTkLabel(day_frame, text=f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise[i]}", font=("Arial", 14))
            label_sunrise.grid(row=7, column=0, padx=10, pady=2, sticky="w")

            label_sunset = ctk.CTkLabel(day_frame, text=f"üåá –ó–∞–∫–∞—Ç: {sunset[i]}", font=("Arial", 14))
            label_sunset.grid(row=8, column=0, padx=10, pady=2, sticky="w")

            label_daylight = ctk.CTkLabel(day_frame, text=f"üåû –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è: {self.calculate_daylight_duration(sunrise[i], sunset[i])}", font=("Arial", 14))
            label_daylight.grid(row=9, column=0, padx=10, pady=2, sticky="w")

            label_uv_index = ctk.CTkLabel(day_frame, text=f"‚òÄÔ∏è –£–§ –∏–Ω–¥–µ–∫—Å: {uv_index[i]}", font=("Arial", 14))
            label_uv_index.grid(row=10, column=0, padx=10, pady=2, sticky="w")

            label_weathercode = ctk.CTkLabel(day_frame, text=f"üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–π –∫–æ–¥: {self.get_weathercode_description(weathercode[i])}", font=("Arial", 14))
            label_weathercode.grid(row=11, column=0, padx=10, pady=2, sticky="w")

    def calculate_daylight_duration(self, sunrise, sunset):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è."""
        from datetime import datetime
        sunrise_time = datetime.strptime(sunrise, "%Y-%m-%dT%H:%M")
        sunset_time = datetime.strptime(sunset, "%Y-%m-%dT%H:%M")
        daylight_duration = sunset_time - sunrise_time
        return str(daylight_duration)

    def get_weathercode_description(self, code):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
        weathercode_descriptions = {
            0: "–Ø—Å–Ω–æ",
            1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ",
            2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
            3: "–ü–∞—Å–º—É—Ä–Ω–æ",
            45: "–¢—É–º–∞–Ω",
            48: "–¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º",
            51: "–ú–æ—Ä–æ—Å—å: –ª–µ–≥–∫–∞—è",
            53: "–ú–æ—Ä–æ—Å—å: —É–º–µ—Ä–µ–Ω–Ω–∞—è",
            55: "–ú–æ—Ä–æ—Å—å: —Å–∏–ª—å–Ω–∞—è",
            56: "–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å: –ª–µ–≥–∫–∞—è",
            57: "–õ–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å: —Å–∏–ª—å–Ω–∞—è",
            61: "–î–æ–∂–¥—å: –ª–µ–≥–∫–∏–π",
            63: "–î–æ–∂–¥—å: —É–º–µ—Ä–µ–Ω–Ω—ã–π",
            65: "–î–æ–∂–¥—å: —Å–∏–ª—å–Ω—ã–π",
            66: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å: –ª–µ–≥–∫–∏–π",
            67: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å: —Å–∏–ª—å–Ω—ã–π",
            71: "–°–Ω–µ–≥: –ª–µ–≥–∫–∏–π",
            73: "–°–Ω–µ–≥: —É–º–µ—Ä–µ–Ω–Ω—ã–π",
            75: "–°–Ω–µ–≥: —Å–∏–ª—å–Ω—ã–π",
            77: "–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞",
            80: "–õ–∏–≤–µ–Ω—å: –ª–µ–≥–∫–∏–π",
            81: "–õ–∏–≤–µ–Ω—å: —É–º–µ—Ä–µ–Ω–Ω—ã–π",
            82: "–õ–∏–≤–µ–Ω—å: —Å–∏–ª—å–Ω—ã–π",
            85: "–°–Ω–µ–≥–æ–ø–∞–¥: –ª–µ–≥–∫–∏–π",
            86: "–°–Ω–µ–≥–æ–ø–∞–¥: —Å–∏–ª—å–Ω—ã–π",
            95: "–ì—Ä–æ–∑–∞: –ª–µ–≥–∫–∞—è –∏–ª–∏ —É–º–µ—Ä–µ–Ω–Ω–∞—è",
            96: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º: –ª–µ–≥–∫–∞—è",
            99: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º: —Å–∏–ª—å–Ω–∞—è"
        }
        return weathercode_descriptions.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    def plot_weather(self, data, frame):
        """–°—Ç—Ä–æ–∏—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."""
        for widget in frame.winfo_children():
            widget.destroy()

        daily = data.get('daily', {})
        times = daily.get('time', [])
        temp_max = daily.get('temperature_2m_max', [])
        temp_min = daily.get('temperature_2m_min', [])
        apparent_temp_max = daily.get('apparent_temperature_max', [])
        apparent_temp_min = daily.get('apparent_temperature_min', [])
        precipitation = daily.get('precipitation_sum', [])
        precipitation_probability = daily.get('precipitation_probability_max', [])
        windspeed = daily.get('windspeed_10m_max', [])
        uv_index = daily.get('uv_index_max', [])

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        fig_temp, ax_temp = plt.subplots(figsize=(8, 4))
        ax_temp.plot(times, temp_max, label='–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', color='red')
        ax_temp.plot(times, temp_min, label='–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', color='blue')
        ax_temp.set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
        ax_temp.set_xticks(times)
        ax_temp.set_xticklabels(times, rotation=45)
        ax_temp.legend()
        plt.tight_layout()

        canvas_temp = FigureCanvasTkAgg(fig_temp, master=frame)
        canvas_temp.draw()
        canvas_temp.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –æ—â—É—â–µ–Ω–∏—è–º
        fig_apparent_temp, ax_apparent_temp = plt.subplots(figsize=(8, 4))
        ax_apparent_temp.plot(times, apparent_temp_max, label='–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º (¬∞C)', color='orange')
        ax_apparent_temp.plot(times, apparent_temp_min, label='–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º (¬∞C)', color='purple')
        ax_apparent_temp.set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º')
        ax_apparent_temp.set_xticks(times)
        ax_apparent_temp.set_xticklabels(times, rotation=45)
        ax_apparent_temp.legend()
        plt.tight_layout()

        canvas_apparent_temp = FigureCanvasTkAgg(fig_apparent_temp, master=frame)
        canvas_apparent_temp.draw()
        canvas_apparent_temp.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤
        fig_precip, ax_precip = plt.subplots(figsize=(8, 4))
        ax_precip.bar(times, precipitation, label='–û—Å–∞–¥–∫–∏ (–º–º)', color='green')
        ax_precip.set_title('–û—Å–∞–¥–∫–∏')
        ax_precip.set_xticks(times)
        ax_precip.set_xticklabels(times, rotation=45)
        ax_precip.legend()
        plt.tight_layout()

        canvas_precip = FigureCanvasTkAgg(fig_precip, master=frame)
        canvas_precip.draw()
        canvas_precip.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Å–∞–¥–∫–æ–≤
        fig_precip_prob, ax_precip_prob = plt.subplots(figsize=(8, 4))
        ax_precip_prob.bar(times, precipitation_probability, label='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ (%)', color='blue')
        ax_precip_prob.set_title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤')
        ax_precip_prob.set_xticks(times)
        ax_precip_prob.set_xticklabels(times, rotation=45)
        ax_precip_prob.legend()
        plt.tight_layout()

        canvas_precip_prob = FigureCanvasTkAgg(fig_precip_prob, master=frame)
        canvas_precip_prob.draw()
        canvas_precip_prob.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
        fig_wind, ax_wind = plt.subplots(figsize=(8, 4))
        ax_wind.plot(times, windspeed, label='–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)', color='orange')
        ax_wind.set_title('–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞')
        ax_wind.set_xticks(times)
        ax_wind.set_xticklabels(times, rotation=45)
        ax_wind.legend()
        plt.tight_layout()

        canvas_wind = FigureCanvasTkAgg(fig_wind, master=frame)
        canvas_wind.draw()
        canvas_wind.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ –£–§ –∏–Ω–¥–µ–∫—Å–∞
        fig_uv_index, ax_uv_index = plt.subplots(figsize=(8, 4))
        ax_uv_index.plot(times, uv_index, label='–£–§ –∏–Ω–¥–µ–∫—Å', color='purple')
        ax_uv_index.set_title('–£–§ –∏–Ω–¥–µ–∫—Å')
        ax_uv_index.set_xticks(times)
        ax_uv_index.set_xticklabels(times, rotation=45)
        ax_uv_index.legend()
        plt.tight_layout()

        canvas_uv_index = FigureCanvasTkAgg(fig_uv_index, master=frame)
        canvas_uv_index.draw()
        canvas_uv_index.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

    def show_hourly_weather_forecast(self, data, frame):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."""
        for widget in frame.winfo_children():
            widget.destroy()

        hourly = data.get('hourly', {})
        times = hourly.get('time', [])
        temperature = hourly.get('temperature_2m', [])
        humidity = hourly.get('relative_humidity_2m', [])
        precipitation = hourly.get('precipitation', [])
        windspeed = hourly.get('windspeed_10m', [])
        visibility = hourly.get('visibility', [])
        weathercode = hourly.get('weathercode', [])
        soil_temperature_0cm = hourly.get('soil_temperature_0cm', [])
        soil_temperature_6cm = hourly.get('soil_temperature_6cm', [])
        soil_temperature_18cm = hourly.get('soil_temperature_18cm', [])
        soil_temperature_54cm = hourly.get('soil_temperature_54cm', [])

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        for i in range(0, len(times), 2):
            hour_frame = ctk.CTkFrame(frame, corner_radius=10)
            hour_frame.pack(fill="x", padx=5, pady=5)

            label_time = ctk.CTkLabel(hour_frame, text=times[i], font=("Arial", 16, "bold"))
            label_time.grid(row=0, column=0, padx=10, pady=5, sticky="w")

            label_temp = ctk.CTkLabel(hour_frame, text=f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature[i]}¬∞C", font=("Arial", 14))
            label_temp.grid(row=1, column=0, padx=10, pady=2, sticky="w")

            label_humidity = ctk.CTkLabel(hour_frame, text=f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity[i]}%", font=("Arial", 14))
            label_humidity.grid(row=2, column=0, padx=10, pady=2, sticky="w")

            label_precip = ctk.CTkLabel(hour_frame, text=f"üåßÔ∏è –û—Å–∞–¥–∫–∏: {precipitation[i]} –º–º", font=("Arial", 14))
            label_precip.grid(row=3, column=0, padx=10, pady=2, sticky="w")

            label_wind = ctk.CTkLabel(hour_frame, text=f"üí® –í–µ—Ç–µ—Ä: {windspeed[i]} –º/—Å", font=("Arial", 14))
            label_wind.grid(row=4, column=0, padx=10, pady=2, sticky="w")

            label_visibility = ctk.CTkLabel(hour_frame, text=f"üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å: {visibility[i]} –º", font=("Arial", 14))
            label_visibility.grid(row=5, column=0, padx=10, pady=2, sticky="w")

            label_weathercode = ctk.CTkLabel(hour_frame, text=f"üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–π –∫–æ–¥: {self.get_weathercode_description(weathercode[i])}", font=("Arial", 14))
            label_weathercode.grid(row=6, column=0, padx=10, pady=2, sticky="w")

            label_soil_temp_0cm = ctk.CTkLabel(hour_frame, text=f"üå± –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (0 —Å–º): {soil_temperature_0cm[i]}¬∞C", font=("Arial", 14))
            label_soil_temp_0cm.grid(row=7, column=0, padx=10, pady=2, sticky="w")

            label_soil_temp_6cm = ctk.CTkLabel(hour_frame, text=f"üå± –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (6 —Å–º): {soil_temperature_6cm[i]}¬∞C", font=("Arial", 14))
            label_soil_temp_6cm.grid(row=8, column=0, padx=10, pady=2, sticky="w")

            label_soil_temp_18cm = ctk.CTkLabel(hour_frame, text=f"üå± –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (18 —Å–º): {soil_temperature_18cm[i]}¬∞C", font=("Arial", 14))
            label_soil_temp_18cm.grid(row=9, column=0, padx=10, pady=2, sticky="w")

            label_soil_temp_54cm = ctk.CTkLabel(hour_frame, text=f"üå± –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (54 —Å–º): {soil_temperature_54cm[i]}¬∞C", font=("Arial", 14))
            label_soil_temp_54cm.grid(row=10, column=0, padx=10, pady=2, sticky="w")

    def plot_hourly_weather(self, data, frame):
        """–°—Ç—Ä–æ–∏—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
        for widget in frame.winfo_children():
            widget.destroy()

        hourly = data.get('hourly', {})
        times = hourly.get('time', [])
        temperature = hourly.get('temperature_2m', [])
        humidity = hourly.get('relative_humidity_2m', [])
        precipitation = hourly.get('precipitation', [])
        windspeed = hourly.get('windspeed_10m', [])
        visibility = hourly.get('visibility', [])
        soil_temperature_0cm = hourly.get('soil_temperature_0cm', [])
        soil_temperature_6cm = hourly.get('soil_temperature_6cm', [])
        soil_temperature_18cm = hourly.get('soil_temperature_18cm', [])
        soil_temperature_54cm = hourly.get('soil_temperature_54cm', [])

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        fig_temp, ax_temp = plt.subplots(figsize=(8, 4))
        ax_temp.plot(times, temperature, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', color='red')
        ax_temp.set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
        ax_temp.set_xticks(times[::24])
        ax_temp.set_xticklabels(times[::24], rotation=45)
        ax_temp.legend()
        plt.tight_layout()

        canvas_temp = FigureCanvasTkAgg(fig_temp, master=frame)
        canvas_temp.draw()
        canvas_temp.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        fig_humidity, ax_humidity = plt.subplots(figsize=(8, 4))
        ax_humidity.plot(times, humidity, label='–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)', color='blue')
        ax_humidity.set_title('–í–ª–∞–∂–Ω–æ—Å—Ç—å')
        ax_humidity.set_xticks(times[::24])
        ax_humidity.set_xticklabels(times[::24], rotation=45)
        ax_humidity.legend()
        plt.tight_layout()

        canvas_humidity = FigureCanvasTkAgg(fig_humidity, master=frame)
        canvas_humidity.draw()
        canvas_humidity.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤
        fig_precip, ax_precip = plt.subplots(figsize=(8, 4))
        ax_precip.bar(times, precipitation, label='–û—Å–∞–¥–∫–∏ (–º–º)', color='green')
        ax_precip.set_title('–û—Å–∞–¥–∫–∏')
        ax_precip.set_xticks(times[::24])
        ax_precip.set_xticklabels(times[::24], rotation=45)
        ax_precip.legend()
        plt.tight_layout()

        canvas_precip = FigureCanvasTkAgg(fig_precip, master=frame)
        canvas_precip.draw()
        canvas_precip.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
        fig_wind, ax_wind = plt.subplots(figsize=(8, 4))
        ax_wind.plot(times, windspeed, label='–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)', color='orange')
        ax_wind.set_title('–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞')
        ax_wind.set_xticks(times[::24])
        ax_wind.set_xticklabels(times[::24], rotation=45)
        ax_wind.legend()
        plt.tight_layout()

        canvas_wind = FigureCanvasTkAgg(fig_wind, master=frame)
        canvas_wind.draw()
        canvas_wind.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        fig_visibility, ax_visibility = plt.subplots(figsize=(8, 4))
        ax_visibility.plot(times, visibility, label='–í–∏–¥–∏–º–æ—Å—Ç—å (–º)', color='purple')
        ax_visibility.set_title('–í–∏–¥–∏–º–æ—Å—Ç—å')
        ax_visibility.set_xticks(times[::24])
        ax_visibility.set_xticklabels(times[::24], rotation=45)
        ax_visibility.legend()
        plt.tight_layout()

        canvas_visibility = FigureCanvasTkAgg(fig_visibility, master=frame)
        canvas_visibility.draw()
        canvas_visibility.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ—á–≤—ã –Ω–∞ –≥–ª—É–±–∏–Ω–µ 0 —Å–º
        fig_soil_temp_0cm, ax_soil_temp_0cm = plt.subplots(figsize=(8, 4))
        ax_soil_temp_0cm.plot(times, soil_temperature_0cm, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (0 —Å–º)', color='brown')
        ax_soil_temp_0cm.set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (0 —Å–º)')
        ax_soil_temp_0cm.set_xticks(times[::24])
        ax_soil_temp_0cm.set_xticklabels(times[::24], rotation=45)
        ax_soil_temp_0cm.legend()
        plt.tight_layout()

        canvas_soil_temp_0cm = FigureCanvasTkAgg(fig_soil_temp_0cm, master=frame)
        canvas_soil_temp_0cm.draw()
        canvas_soil_temp_0cm.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ—á–≤—ã –Ω–∞ –≥–ª—É–±–∏–Ω–µ 6 —Å–º
        fig_soil_temp_6cm, ax_soil_temp_6cm = plt.subplots(figsize=(8, 4))
        ax_soil_temp_6cm.plot(times, soil_temperature_6cm, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (6 —Å–º)', color='purple')
        ax_soil_temp_6cm.set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (6 —Å–º)')
        ax_soil_temp_6cm.set_xticks(times[::24])
        ax_soil_temp_6cm.set_xticklabels(times[::24], rotation=45)
        ax_soil_temp_6cm.legend()
        plt.tight_layout()

        canvas_soil_temp_6cm = FigureCanvasTkAgg(fig_soil_temp_6cm, master=frame)
        canvas_soil_temp_6cm.draw()
        canvas_soil_temp_6cm.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ—á–≤—ã –Ω–∞ –≥–ª—É–±–∏–Ω–µ 18 —Å–º
        fig_soil_temp_18cm, ax_soil_temp_18cm = plt.subplots(figsize=(8, 4))
        ax_soil_temp_18cm.plot(times, soil_temperature_18cm, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (18 —Å–º)', color='brown')
        ax_soil_temp_18cm.set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (18 —Å–º)')
        ax_soil_temp_18cm.set_xticks(times[::24])
        ax_soil_temp_18cm.set_xticklabels(times[::24], rotation=45)
        ax_soil_temp_18cm.legend()
        plt.tight_layout()

        canvas_soil_temp_18cm = FigureCanvasTkAgg(fig_soil_temp_18cm, master=frame)
        canvas_soil_temp_18cm.draw()
        canvas_soil_temp_18cm.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ—á–≤—ã –Ω–∞ –≥–ª—É–±–∏–Ω–µ 54 —Å–º
        fig_soil_temp_54cm, ax_soil_temp_54cm = plt.subplots(figsize=(8, 4))
        ax_soil_temp_54cm.plot(times, soil_temperature_54cm, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (54 —Å–º)', color='purple')
        ax_soil_temp_54cm.set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã (54 —Å–º)')
        ax_soil_temp_54cm.set_xticks(times[::24])
        ax_soil_temp_54cm.set_xticklabels(times[::24], rotation=45)
        ax_soil_temp_54cm.legend()
        plt.tight_layout()

        canvas_soil_temp_54cm = FigureCanvasTkAgg(fig_soil_temp_54cm, master=frame)
        canvas_soil_temp_54cm.draw()
        canvas_soil_temp_54cm.get_tk_widget().pack(fill=ctk.BOTH, expand=True)

    def update_7_day_weather(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π."""
        if self.current_city:
            data = self.get_7_day_weather_data(self.current_city)
            if data:
                self.show_weather_forecast(data, self.frame_forecast)
                self.plot_weather(data, self.frame_chart)
                self.label_no_city.grid_remove()
            else:
                self.label_no_city.grid(row=3, column=0, padx=10, pady=5, sticky="w")
        else:
            self.label_no_city.grid(row=3, column=0, padx=10, pady=5, sticky="w")

    def update_hourly_weather(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑."""
        if self.current_city:
            if self.hourly_data is None:
                self.hourly_data = self.get_hourly_weather_data(self.current_city)
            if self.hourly_data:
                self.show_hourly_weather_forecast(self.hourly_data, self.frame_hourly)
                self.plot_hourly_weather(self.hourly_data, self.frame_hourly_chart)
                self.label_no_city_hourly.grid_remove()
            else:
                self.label_no_city_hourly.grid(row=3, column=0, padx=10, pady=5, sticky="w")
        else:
            self.label_no_city_hourly.grid(row=3, column=0, padx=10, pady=5, sticky="w")

    def show_tab(self, tab_name):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏."""
        if tab_name == "–ì–æ—Ä–æ–¥":
            self.frame_city.grid(row=1, column=1, sticky="nsew")
            self.frame_weather.grid_remove()
            self.frame_forecast_tab.grid_remove()
            self.frame_hourly_tab.grid_remove()
            self.frame_settings.grid_remove()
        elif tab_name == "–ü–æ–≥–æ–¥–∞":
            self.frame_weather.grid(row=1, column=1, sticky="nsew")
            self.frame_city.grid_remove()
            self.frame_forecast_tab.grid_remove()
            self.frame_hourly_tab.grid_remove()
            self.frame_settings.grid_remove()
        elif tab_name == "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π":
            self.frame_forecast_tab.grid(row=1, column=1, sticky="nsew")
            self.frame_city.grid_remove()
            self.frame_weather.grid_remove()
            self.frame_hourly_tab.grid_remove()
            self.frame_settings.grid_remove()
        elif tab_name == "–ü–æ—á–∞—Å–æ–≤—ã–µ –ü–æ–≥–æ–¥–Ω—ã–µ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ":
            self.frame_hourly_tab.grid(row=1, column=1, sticky="nsew")
            self.frame_city.grid_remove()
            self.frame_weather.grid_remove()
            self.frame_forecast_tab.grid_remove()
            self.frame_settings.grid_remove()
        elif tab_name == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            self.frame_settings.grid(row=1, column=1, sticky="nsew")
            self.frame_city.grid_remove()
            self.frame_weather.grid_remove()
            self.frame_forecast_tab.grid_remove()
            self.frame_hourly_tab.grid_remove()

    def on_closing(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞."""
        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        os._exit(0)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = ctk.CTk()
    weather_app = WeatherApp(app)
    app.protocol("WM_DELETE_WINDOW", weather_app.on_closing)
    app.mainloop()
